*voof.txt*      Vim Outliner Of Folds
VOOF (Vim Outliner Of Folds): two-pane outliner and related utilities
plugin for Python-enabled Vim version 7.x
Website: http://www.vim.org/scripts/script.php?script_id=2657
Author: Vlad Irnov  (vlad DOT irnov AT gmail DOT com)
License: this file is in the public domain
Version: 1.6, 2009-08-23

==============================================================================
Contents   {{{1~
  Overview                         |voof_overview|
  Requirements                     |voof_requirements|
  Installation                     |voof_install|
  Options                          |voof_options|
  All Mappings and Commands        |voof_map|
  OUTLINING (:Voof)                |voof_Voof|
  RUNNING SCRIPTS (:Voofrun)       |voof_Voofrun|
  __PyLog__ BUFFER (:Vooflog)      |voof_Vooflog|
  Implementation notes             |voof_notes|

==============================================================================
Overview   {{{1~
                                                 *voof_overview*
VOOF (Vim Outliner Of Folds) is a plugin for Vim that emulates a two-pane text
outliner. It can be used with any file or buffer that has start fold markers
with level numbers (|fold-marker|) such as this help file. The only
requirement is that there are should be no end fold markers with levels.

Screenshots and an animation: http://www.flickr.com/photos/voof/

The are four main Ex commands: Voof, Voofhelp, Voofrun, Vooflog.

:Voof       Creates outline of the current buffer. The outline is constructed
            from lines with start fold markers with level numbers, which
            become headlines. The outline is displayed in a separate window
            with a scratch buffer, which emulates tree pane of a two-pane
            outliner. Such buffers are referred to as Tree buffers. The
            current buffer becomes a Body buffer. Each Tree headline is
            associated with a region (usually a fold) of the corresponding
            Body, called node. Nodes can be navigated by browsing the Tree.
            They can also be manipulated from the Tree: moved up/down,
            promoted/demoted, marked/unmarked, etc.
            See OUTLINING (|voof_Voof|) for detailed user guide.

:Voofhelp   Opens help file voof.txt as outline in a new tabpage.


The VOOF plugin also provides two utilities useful when working with Vim and
Python scripts. They can be used independently of the outlining functionality
provided by the :Voof command. These two utilities attempt to emulate
corresponding features of Leo text outliner.

:Voofrun    Executes text in the current node or fold as Vim script or Python
            script. This is useful for testing code snippets and for
            organizing scripts by segregating them into folds. This command
            does not require an outline to be created and can be used with any
            buffer that has folds.
            See RUNNING SCRIPTS (|voof_Voofrun|) for details.

:Vooflog    Creates scratch buffer __PyLog__ and redirects Python stdout and
            stderr to that buffer. This feature is not related to folding or
            outlining and is completely independent from the rest of the
            plugin. It's useful when scripting Vim with Python.
            See __PyLog__ BUFFER (|voof_Vooflog|) for details.

QUICK DEMO (no installation needed):~
Make sure files voof.vim and voof.py are together in one folder.
Open voof.vim and do >
    :so %
    :Voof
This will create Tree buffer for voof.vim .

<Up>, <Left>, <Up>, <Down> arrow keys move around the Tree and select new node
(all mappings are for the normal mode).

<Return> selects node the cursor is on and then cycles between Tree and
voof.vim . So, to select another node, move to it with h, j, etc. and hit
Return.

<Tab> cycles between Tree and voof.vim windows without selecting node.

(All VOOF mappings, except Return and Tab, are for Tree buffers only.)

<Space> expands/contracts node without selecting it. Standard Vim folding
command (zo, zc, zR, zM, etc.) can be used as well.

Left mouse click in the Tree selects node. If the click is to the left/right
of headline text, the node's expanded/contracted status is toggled.

Edit a headline (line with a fold marker) in voof.vim and go back into the
Tree: the outline will be updated.

<C-Up>, <C-Down> move node or a range of sibling nodes up/down.
<C-Left>, <C-Right> promote/demote.

Folder "sample_outlines" contains some outlines to experiment with.
File "calendar_outline.txt" is a rather large outline for stress-testing
purposes: 3.1MB, 56527 lines, 4160 headlines.

To try Python Log Buffer feature: >
    :Vooflog
    :py assert 2==3
    :py print VOOF.nodes
    :py print u'\u2248 \u2260'

------------------------------------------------------------------------------
Limitations   {{{2~
Voof is not scalable to large outlines. Nodes are not true object, they are
just line numbers of Body headlines. The bottleneck is the brute force update
of the outline data (performed by voof.voofUpdate()). Such update, which
basically recreates outline from scratch, must be done whenever the user
switches to Tree buffer after modifying corresponding Body--we can't possibly
know what the user did with the Body while he was away from the Tree.

Sample outline "calendar_outline.txt" seems to be approaching the usable size
limit on my 2002 notebook (1.6GHz Pentium 4 Mobile):
    3.2MB, 56527 lines, 4160 headlines.
When moving to Tree after modifying Body, the pause due to outline update is
noticeable but is still less than a second.

Browsing outline is fast regardless of it's size. Outline operations are also
fast because they bypass global outline update unless "g:voof_verify_oop" is
set to 1.

In case of "calendar_outline.txt" stress test, the time consuming step is not
just scanning for fold markers, but also comparing >4000 headlines between the
old and new outlines, or, if outlines are very different, setting all lines in
the Tree buffer. This means that even larger files can be outlined if they
have much fewer headlines.

------------------------------------------------------------------------------
Other Text Outliners  {{{2~

Leo:
    http://webpages.charter.net/edreamleo/front.html
    The __PyLog__ buffer, which is created by command :Vooflog, is the
    equivalent of Leo's log pane.
    The :Voofrun command is like Leo's Execute Script command when performed
    on a node which has an @others directive.
    Mark/Unmark nodes operations are modeled after identical Leo commands.

The "Tag List" Vim plugin:
    http://vim.sourceforge.net/scripts/script.php?script_id=273
    Conceptually VOOF is similar to the Taglist plugin and other code
    browsers. Taglist uses the ctags program to scan file for lines with tags.
    VOOF uses Python script to scan buffer for lines with start fold markers
    with levels.

VO, Vim Outliner:
    http://www.vimoutliner.org/
TVO, The Vim Outliner:
    http://vim.sourceforge.net/scripts/script.php?script_id=517

Various Vim scripts with outlining-like functionality (there are probably many
other):
TaskList.vim : Eclipse like task list:
    http://www.vim.org/scripts/script.php?script_id=2607
DotOutlineTree:
    http://www.vim.org/scripts/script.php?script_id=1225

Code Browser:
    http://code-browser.sourceforge.net/

Emacs oultining modes, OrgMode seems to be popular:
    http://www.emacswiki.org/emacs-ja/CategoryOutline

Listings of outliner programs:
    http://www.psychinnovations.com/psych/node/37
    http://www.marktaw.com/reviews/Outliners.html
    http://www.outlinersoftware.com/topics/viewt/807/0/list-of-outliners
    http://en.wikipedia.org/wiki/Category:Outliners

==============================================================================
Requirements   {{{1~
                                                 *voof_requirements*
VOOF uses Python and requires Python-enabled Vim 7.x, that is Vim compiled
with the Python interface. Your Vim is Python-enabled if it can do >
    :py print 2**0.5

Python version should be 2.4 - 2.6 .
Python 3 is not supported and is not compatible with Vim anyway.

Vim version 7.2 or above is preferred. Version 7.1 should also work.
Version 7.0 might work as well but has not been tested.

Vim should be compiled using normal or bigger feature set.

Vim patch 7.2.161 is required in order to be able to work on the same outline
(or any buffer with folds) in separate tabpages.

==============================================================================
Installation   {{{1~
                                                 *voof_install*
Copy files "voof.vim" and "voof.py" to your local plugin folder: >
    $HOME\vimfiles\plugin (Windows)
    ~/.vim/plugin         (Unix)
This will make commands Voof, Vooflog, Voofrun available from any buffer.

Help file "voof.txt" can be in the "voof.vim" folder or in the local doc
folder. To install "voof.txt" as Vim help (see |add-local-help|), move it to
your local doc folder and generate help tags (there are few) with >
    helptags <doc dir>


To try VOOF without installing anything:
Make sure voof.vim, voof.py, voof.txt are in the same directory.
Open voof.vim and do >
    :so %
    :Voof
To create outline for another file, run :Voof command for it: >
    :tabnew
    :e $VIMRUNTIME/autoload/netrw.vim
    :Voof


NOTE: VOOF uses quickload mechanism, see |write-plugin-quickload|. The bulk of
the "voof.vim" script is sourced and "voof.py" is imported only after a Voof
command is run for the first time.

NOTE: When "voof.vim" is sourced, its Python code adds script's directory to
sys.path and then imports "voof.py". This creates file "voof.pyc". Command
:Voofrun, when running Python script, creates file "voofScript.py" also in the
"voof.vim" directory.

NOTE: If is recommended that the following line be put in .vimrc when using
Voof outlining on a regular basis: >
    let g:voof_verify_oop = 1
This option turns on verification of outline data integrity after every
outline operation. It will alert to outline corruption, which is very likely
if there is a bug in outline operation. This verification is disabled by
default because it's rather expensive when the outline is large (>500
headlines).


==============================================================================
Options   {{{1~
                                                 *voof_options*
------------------------------------------------------------------------------
Vim Options   {{{2~

'foldmethod' for the buffer for which the Voof command is run should be
"marker" (:set fdm=marker). This, however, is not required to create an
outline or to use it. Outline operations do not rely on Vim folds, they use
fold markers with levels. Other fold options, such as 'foldtext' could be set
according to personal preferences and could be filetype-specific.

'foldmarker' (local to window) is used by the Voof command to obtain the start
fold marker string. There is rarely a reason to change this option from
default.

<LocalLeader> is used to start many outline operations while in a Tree buffer.
By default, it's backslash. For example, \i inserts new node.  To change it to
another character, assign maplocalleader in .vimrc: >
     let maplocalleader=','

'scrolloff' should be 0 (default) or a small number (1 or 2). This global
option affects how the headline is positioned in the Body window after
selecting node in the Tree. For example, with scrolloff=1, the headline will
be on the 2nd window line in the Body window. A very large value can be
confusing when switching between Tree and Body windows.

Vim commands for creating and deleting folds are not very useful and are
potentially dangerous when typed accidentally. They can be disabled in .vimrc
as follows: >
     " Disable commands for creating and deleting folds.
     noremap zf <Nop>
     noremap zF <Nop>
     noremap zd <Nop>
     noremap zD <Nop>
     noremap zE <Nop>

Some color schemes (including default) use the same or similar background
colors for selected text (Visual), folded lines (Folded), and current line
(CursorLine) highlight groups. These highlight groups are used in Tree windows
and it's better if they are different from each other.

------------------------------------------------------------------------------
VOOF Options   {{{2~
These are VOOF-specific global variables that can be assigned in .vimrc.
Example: >
    let g:voof_tree_placement = "left"
    let g:voof_tree_width = 40

------------------------------------------------------------------------------
Window options   {{{3~

g:voof_tree_placement   ~
    Where Tree window is created: "left", "right", "top", "bottom"
    This is relative to the current window.
    Default: "left"

g:voof_tree_width   ~
    Initial Tree window width.
    Default: 30

g:voof_tree_hight   ~
    Initial Tree window hight.
    Default: 12

g:voof_log_placement   ~
    Where Log window is created: "left", "right", "top", "bottom"
    This is far left/right/top/bottom.
    Default: "bottom"

g:voof_log_width   ~
    Initial Log window width.
    Default: 30

g:voof_log_hight   ~
    Initial Log window hight.
    Default: 12

------------------------------------------------------------------------------
Tree/Body shuttle keys   {{{3~

Since VOOF emulates a two-pane outliner, it's important to have keys that
shuttle between the two panes. By default, such keys are <Return> (Select Node
and Shuttle between Body and Tree) and <Tab> (Shuttle between Body and Tree).
These keys are mapped both in Tree and Body buffers. By default, these two
keys do not do anything interesting in Normal and Visual modes. However, they
may be used by other plugins and user scripts. The next two settings allow to
use keys other than <Return> or <Tab>. Note also, that these are the only keys
that get mapped in Body when the Voof command is run.

g:voof_return_key   ~
    Key for selecting node and shuttling between Tree and Body windows.
    It will be used in buffer-local mappings in Trees (Normal and Visual
    modes) and Bodies (Normal mode).
    Default: "<Return>"
g:voof_tab_key   ~
    Key for shuttling between Tree and Body windows without selecting node.
    It will be used in buffer-local mappings in Trees (Normal and Visual
    modes) and Bodies (Normal mode).
    Default: "<Tab>"

------------------------------------------------------------------------------
Other options   {{{3~

g:voof_verify_oop   ~
    Verify outline after every outline operation.
    Default is 0 (disabled).
    Set to 1 to enable.

    It is recommended that this option be enabled when using Voof outlining on
    a regular basis. It will alert to outline corruption, which is very likely
    if there is a bug in outline operation. The downside is there is a
    performance hit when the outline is large (>500 headlines).

------------------------------------------------------------------------------
Customizing Tree and __PyLog__ buffers   {{{3~

When a Tree buffer is created, its 'filetype' is set to "vooftree"
When __PyLog__ buffer is created, its 'filetype' is set to "log".

This should allow user customization of these buffers (syntax, wrap/norwap,
list/nolist, etc.) via standard Vim configuration files:
   $HOME/vimfiles/ftplugin/vooftree.vim
   $HOME/vimfiles/syntax/vooftree.vim
   $HOME/vimfiles/after/syntax/log.vim
   etc.

==============================================================================
# All Mappings & Commands #   {{{1=  ~
                                                 *voof_map*
        MAIN COMMANDS
:Voof               Create outline of the current buffer |voof_Voof|.
:Voofrun [py,vim]   Run node or fold as [type] script |voof_Voofrun|.
:Vooflog            Create __PyLog__ buffer |voof_Vooflog|.
:Voofhelp           Open voof.txt as outline in a new tabpage.

        OTHER COMMANDS
:Voofunl            Display node's UNL (Uniform Node Locator) |voof_Voofunl|.
:Voofgrep [pattern] Search Body buffer for pattern and display results
                    in the quickfix window as list of UNLs of nodes with
                    matches |voof_Voofgrep|.

BODY BUFFER MAPPINGS~

<Return>    (n) Select node the cursor is on. If already selected,
                move cursor to Tree window.
<Tab>       (n) Move cursor to Tree window.

TREE BUFFER MAPPINGS~

        OUTLINE NAVIGATION

<Return>  (n,v) Select node the cursor is on. If already selected,
                move cursor to Body window.
<Tab>     (n,v) Move cursor to Body window.
<Up>      (n) Move cursor Up and select new node.
<Down>    (n) Move cursor Down and select new node.
<Right>   (n) Traverse node's tree down: move to first child and select it.
<Left>    (n) Traverse node's tree up: move to parent and select it.
              If the node is expanded, it is contracted first.
=         (n) Put cursor on selected node.

<LeftRelease> (n) Mouse left button click. Select node.
                  Expand/contract node if clicked outside headline text.

<Space>   (n) Expand/contract node without selecting it.

x         (n) Go to next marked node (find headline marked with 'x').
X         (n) Go to previous marked node.

        OUTLINE OPERATIONS

i I a A         (n) Edit headline the cursor is on.

<LocalLeader>i  (n) Insert new node after current node.
<LocalLeader>I  (n) Insert new node as child of current node.

<C-Up>
<LocalLeader>u  (n,v) Move node(s) Up.

<C-Down>
<LocalLeader>d  (n,v) Move node(s) Down.

<C-Left>
<<
<LocalLeader>l  (n,v) Move node(s) Left (promote).

<C-Right>
>>
<LocalLeader>r  (n,v) Move node(s) Right (demote).

Cut/Copy/Paste operations use Vim + register (system clipboard).
dd              (n,v) Cut node(s).
yy              (n,v) Copy node(s).
pp              (n)   Paste node(s) after current node.

<LocalLeader>m  (n,v) Mark node(s)--add 'x' to headlines.
<LocalLeader>M  (n,v) Unmark node(s)--remove 'x' from headlines.

<LocalLeader>=  (n) Mark node as to be selected after startup.

        VARIOUS
<F1>            (n) Open voof.txt as outline in new tabpage.
                    Same as Voofhelp command.

<LocalLeader>r  (n) Run script. Same as Voofrun command.


==============================================================================
OUTLINING (:Voof)   {{{1~
------------------------------------------------------------------------------
Create Outline   {{{2~
                                                 *voof_Voof*
:Voof   This command creates outline of the current buffer and displays it in
        a new window with a scratch buffer called Tree buffer. The current
        buffer becomes a Body buffer. The following happens:

The current buffer (Body) is scanned for lines with start fold markers with
level numbers: {{{3, {{{1, etc. End fold markers }}}1, }}}3, etc. are ignored
and should not be used. These lines, or headlines, are displayed in the
corresponding Tree buffer as an outline using indent-based folding. The level
of each headline is set to the number after the fold marker.

NOTE: Matching fold markers without level numbers, {{{ and }}}, are ignored
and are useful to fold small areas inside numbered folds, e.g. parts of
functions. The region between {{{ and }}} should not contain fold markers with
levels.

Tree buffers are named {bufname}_VOOF{bufnr} where {bufname} and {bufnr} are
buffer name and number of the corresponding Body buffer.

Tree buffers are displayed in separate windows. A Tree buffer and its window
are configured to behave as tree pane of a two-pane outliner. Each headline in
Tree buffer is associated with a node in the corresponding Body.

"Node" is a Body buffer range that begins with headline (line with start fold
marker with level number) and ends before the next headline. The last node
ends with the last buffer line. The region from start of buffer to the first
headline (or end of buffer) is treated as a special node number 1 (it can have
zero lines).

When Body has 'foldmethod' set to "marker" (|fold-marker|), Body nodes are
also folds. This is recommended, but is not required: Voof outlining does not
rely on folding, only on lines with start fold markers with levels.

Selecting a headline in Tree window (<Return>, <Up>, <Down>, <Left>, <Right>)
will display corresponding node in Body window. Nodes can be manipulated from
Tree window: deleted, moved, promoted, demoted, marked, etc. Of course, Body
buffer can be edited directly as any other buffer with folds.

The outline data and the Tree buffer are updated as needed every time the
cursor is moved to Tree buffer (on |BufEnter|). The actual update happens if
the Body has been modified since the last update (when Body's b:changedtick
has changed, see |b:changedtick-variable|). This update is the bottleneck that
limits the size of outlines that can be worked with comfortably.

A Tree buffer is not modifiable and should never be edited directly. It has
many buffer-local mappings that are designed to navigate the outline (e.g.,
<Space> expands or contacts node), and to perform outline operations, that is
to manipulate nodes in the corresponding Body (e.g., <C-Up> moves node and its
tree up).

A Body buffer has only two buffer-local mappings: <Return> and <Tab> in Normal
mode, which select current node or move cursor to window with the
corresponding Tree buffer. Other keys can be used instead of Return and Tab by
assigning g:voof_return_key and g:voof_tab_key Vim global variables.

------------------------------------------------------------------------------
About Fold Markers   {{{3~
The Voof command does not create an outline of folds. It creates an outline of
start fold markers with level numbers. For best resutls, the Body should have
'foldmethod' set to "marker". Then nodes in the Tree buffer will also
represent Body folds.

The start fold marker is obtained from option 'foldmarker' (local to window)
when Tree buffer is created with the Voof command. For example, after >
    :set foldmarker=<<<,>>>
    :Voof
the outline will be created from lines with <<<1, <<<2, <<<3, etc.

VOOF scans only for start fold markers with level numbers. Fold markers
without level numbers and any end fold markers are ignored. This is not a
problem as long as the user follows the following rules. Based on the author's
experience, these rules are very reasonable. They are similar to
recommendations given in Vim help (:help fold-marker).

1) Use start fold markers with levels, <<<1, <<<2, etc to start new fold/node.
These should correspond to important structures: parts and chapters in a book,
functions and classes in a code.

2) DO NOT USE END FOLD MARKERS WITH LEVELS: >>>1, >>>2, etc. This is a
reasonable requirement: it's hard to keep track of end fold markers in a large
outline and they are redundant anyway.

3) Do use pairs of matching fold markers without level, <<< and >>>, to fold
small areas of text (a screenful), such as parts of functions. Just make sure
the area doesn't contain fold markers with levels.


Files that do have end fold markers with levels are ok for browsing with Voof,
but outline operations will most definitely produce unintended results.
Consider the following structure: >
    node 0
        node 1   <<<1
            node 1.1 <<<2
        >>>1
    ? ? ? ?
    ? ? ? ?
        node 2   <<<1
        node 3   <<<1
Lines with ? are not part of any fold. But Voof considers them part of node
1.1 and will move them accordingly when that node is moved. Furthermore, if
the node's level changes after move, only number after the start fold marker
will be updated.

------------------------------------------------------------------------------
~~~===--- Tree Headline Text ---===~~~  "#//% /*{{{3*/ ~
The headline text as displayed in Tree buffer is constructed from the
corresponding Body headline as follows:
  - Part of the Body headline before the first matching fold marker is taken.
  - Trailing white space and line comment chars #"/*% are removed.
  - Leading and trailing white space is removed.
  - Leading and trailing filler chars -=~ are removed.
  - White space is trimmed again.

This is done by voofOutline() in voof.py .

------------------------------------------------------------------------------
Selected Node   {{{3~
At any moment, one node is designated as selected. It is marked by = character
in the Tree buffer. This is sort of like current position in a true two-pane
outliner.

A node is selected by pressing <Return> (Normal mode, both Tree and Body), or
by selecting new node in Tree window with arrow keys or mouse left button
click.

It is possible to save position of selected node between sessions:
Insert '=' in the Body headline right after the level number, or if the node
is marked, after the 'x' character. Next time, when the outline is created
with the Voof command, this node will be automatically selected. It is better,
however, to add '=' char with  <LocalLeader>=  command in the Tree: it will
make sure that all other = marks are removed from Body headlines.

------------------------------------------------------------------------------
Delete Outline   {{{2~
To delete Voof outline for a particular Body buffer: unload, delete, or wipe
out the corresponding Tree buffer (:bun, :bd, :bw). Tree buffers are
configured to be wiped out when deleted or unloaded.

When a Tree is wiped out, the associated Body buffer becomes mostly as it was
before the outline creation: it looses buffer-local mappings and autocommands
created by Voof. Outline data associated with this Body buffer (Vim and Python
dictionary items) are deleted.

When a Body buffer is unloaded, deleted or wiped out, the corresponding Tree
buffer is wiped out.

------------------------------------------------------------------------------
Outline Navigation   {{{2~
The following mappings are defined for Normal mode, except <Return> and <Tab>
in Tree buffers, where they work both in Normal and Visual modes.

<Return> In Body buffer: select current node and show it in Tree window.
         If current node is already selected, move cursor to Tree window.
         In Tree buffer: select current node and show it in Body window.
         If current node is already selected, move cursor to Body window.

         Note: <Return> creates new window with Body or Tree in the current
         tabpage if there is none. Thus, hitting <Return> after "tab split"
         will create tabpage with a new outline view.

<Tab>    If current buffer is Body buffer, move cursor to window with the
         corresponding Tree buffer and vice versa. If possible, use previous
         window (^Wp).

Note: <Return> and <Tab> are the only keys mapped by Voof in Bodies. Other
keys can be used instead by defining g:voof_return_key and g:voof_tab_key.
All other mappings are for Tree buffers only.

<Up>      Move cursor Up and select new node.

<Down>    Move cursor Down and select new node.

<Right>   Traverse node's tree down: move to first child and select it

<Left>    Traverse node's tree up: move to parent and select it.
          If the node is expanded, it will be contracted first.

=         Put cursor on selected node.

<LeftRelease> Mouse left button click. If the click is to the right or to the
              left of the headline text, select node and toggle its
              expanded/contracted state. If the click is on the headline text,
              just select node.

<Space>   Toggle node's expanded/contracted state without selecting it. Make
          node visible if it's hidden in a fold.

NOTE: Standard Vim folding commands can be used to expand/contract nodes
while in Tree: zc, zo, zM, zR, etc.

x         Go to next marked node (find headline marked with 'x').
X         Go to previous marked node.

------------------------------------------------------------------------------
:Voofunl   {{{3~
                                                 *voof_Voofunl*
:Voofunl
This command displays node's UNL: Uniform Node Locator. (The term is from Leo
outliner.) An UNL looks something like this: >
    Part 2 -> Chapter 4 -> Section 3 -> subsection 5

The UNL is also copied to the 'n' register for easy pasting.

When executed from a Body, the outline data and the Tree will be updated if
needed.


------------------------------------------------------------------------------
:Voofgrep   {{{3~
                                                 *voof_Voofgrep*
:Voofgrep [pattern]
This command searches Body buffer for {pattern} and displays results in the
|quickfix| window as a list of UNLs of nodes with matches.

The whitespace around the pattern is ignored. \s or [ ] can be used to
indicate leading or trailing whitespace.

If pattern is not provided, word at cursor is used, as when starting search
with * or # .

The pattern is copied to the search register @/ so that 'n' and search
highlight could be used.

The search is always performed in Body buffer, from top to bottom. If current
buffer is a Tree buffer, the cursor will move to window with the corresponding
Body. If current buffer is a Body, the outline and the Tree will be updated if
needed.

The search itself is done with |search()|. According to docs, 'ignorecase',
'smartcase' and 'magic' are used.

The search stops after first 1000 matches are found.

The results are displayed in the quickfix window  (|quickfix-window|) as a
list of UNLs of nodes with matches: >
    || Voofgrep \<findme\>
    || 5 matches
    test_outline.txt|4| n1:1  |top-of-file
    test_outline.txt|31| n10:2|3 -> 3.2 -> 3.2.1 -> 3.2.1.1
    test_outline.txt|52| n17:1|4 -> 4.1
    test_outline.txt|93| n30:1|5 -> BB -> BB.1

Numbers after the file name are:
    - Body line number of first match in this node
    - node number, that is node's Tree line number
    - number of matches in this node

NOTE: The readability of UNLs is much better when the -> separators are
highlighted. I have the following two lines in
 $HOME\vimfiles\after\syntax\qf.vim: >
    syn match Title / -> /
    syn match LineNr /| n\d\+:\d\+\s*|/

------------------------------------------------------------------------------
Outline Operations   {{{2~
Outline operations are performed using Tree buffer-local mappings.

When appropriate, operations are automatically applied to trees, that is to
Body nodes and their subnodes. E.g., moving a node, moves the node and its
children as a tree.

When nodes are moved, inserted, etc., their level numbers and those of their
subnodes are automatically adjusted according to their new position in the
outline.

The entire operation can be undone with one undo command in the corresponding
Body buffer.

Most operations can be performed on a range of sibling nodes using Visual
mode. The range is checked for being a valid range: all top level nodes should
be at the same level.

Where the  moved or inserted nodes end up depends on the expanded/contracted
status of the node after which the nodes are inserted. This should be
intuitive and replicates default behavior of Leo text outliner.

Outline operation, with the exception of Copy, are disabled if the Body buffer
is 'nomodifiable' or 'readonly'.

------------------------------------------------------------------------------
Edit Headline   {{{3~
The only way to edit headline text is to edit corresponding Body line.

While in a Tree buffer, Normal mode:

i I a A    Start editing headline the cursor is on.
           The cursor is moved into a Body window and placed on the first word
           char of the headline.

Other common commands for changing text are disabled while in a Tree.

------------------------------------------------------------------------------
Insert New Node   {{{3~

<LocalLeader>i   Insert new node after current node.
<LocalLeader>I   Insert new node as child of current node.

These commands create new headline and puts cursor on the new headline in the
Body where it can be edited. Tree buffer, Normal mode only.


------------------------------------------------------------------------------
Move/Copy/Cut/Paste Nodes   {{{3~

<C-Up>
<LocalLeader>u      Move node(s) up.

<C-Down>
<LocalLeader>d      Move node(s) down.

<C-Left>
<<
<LocalLeader>l      Move node(s) left (promote).

<C-Right>
>>
<LocalLeader>r      Move node(s) right (demote).

dd                  Cut node(s).

yy                  Copy node(s).

pp                  Paste node(s) after current node.

With the exception of Paste, these Tree buffer mappings are available in
Normal and Visual modes. They apply to trees, not nodes. In Visual mode, the
range is checked for being valid: top level nodes in the range must be
siblings.

Cut/Copy/Paste commands use Vim's + register, that is system clipboard. The
Paste command checks clipboard for being a valid Voof outline or a range of
sibling outlines. The first line in the clipboard must have fold marker with
level number.

------------------------------------------------------------------------------
Mark/Unmark Nodes   {{{3~

A node is marked/unmarked by adding/removing 'x' in Body headline after start
fold marker level number. Marked nodes have 'x' in their Tree headlines.

<LocalLeader>m   Mark node the cursor is on (Normal mode) or all nodes in
                 the range (Visual). "x" is added after Body headline level
                 number.

<LocalLeader>M   Unmark node(s). "x" after Body headline level number is
                 removed.

These commands apply to nodes, not trees.

To unmark all: ggVG<LocalLeader>M

'x' and 'X' (Normal mode) move to next or previous marked node.

------------------------------------------------------------------------------
Mark Node as Selected Node   {{{3~

<LocalLeader>=   Mark node the cursor is on as to be selected after startup.
                 Tree buffer, Normal mode only.

This command puts '=' char in Body headline after the level number or, if the
node is marked, after 'x'. All other '=' marks are removed. This mark only
affects Voof startup: the marked node becomes selected node when the outline
is created with the Voof command.


==============================================================================
RUNNING SCRIPTS (:Voofrun)   {{{1~
                                                 *voof_Voofrun*
Command :Voofrun executes text in the current fold or node.
In Tree buffers, this command is also mapped to <LocalLeader>r .

The following happens:
---------------------
1) The type of script is determined.

:Voofrun
    Without an argument, the type of script is set to buffer's 'filetype':
    "python" if filetype is "python", "vim" if filetype is "vim", etc. When
    run from a Tree (also with <LocalLeader>r), filetype of the corresponding
    Body is used.

:Voofrun vim
    Run as "vim" script.

:Voofrun py
:Voofrun python
    Run as "python" script.

:Voofrun whatever
    Run as "whatever" script.

If script is neither "vim" nor "python", the command aborts.
(It should be possible to add support for other script types.)

---------------------
2) When run from a regular, non-Tree buffer, the script text is set to that of
the current fold, including all subfolds. This obviously makes sense only if
'foldmethod' is marker. If 'foldmethod' is not "marker", the command aborts
and the script is not executed.

---------------------
3) When run from a Tree buffer, the script text is set to that of the current
Body node (including headline) and all descendant nodes. The actual folding in
the corresponding Body does not matter and fold markers without levels are
ignored.

---------------------
4) Vim script is executed by copying text into a register and executing that
register inside try/catch/endtry block.

---------------------
5) Python script is executed by first writing text to file "voofScript.py" in the
"voof.vim" directory. The file is then executed using execfile() inside
try/except block. ( http://docs.python.org/library/functions.html#execfile )
The following Python names are predefined: vim, VOOF, voof.

------------------------------------------------------------------------------
sample Vim scripts   {{{2~
Scripts in the following subnodes can be executed with >
    :Voofr vim

"---node 1---{{{3~
echo 'in node 1'
" section {{{
echo 'inside section in node 1'
" }}}

"---node 1.1---{{{4~
echo 'in node 1.1'

"---node 1.1.1---{{{5~
echo 'in node 1.1.1'

"=============================================================================
sample Python scripts   {{{2~
Scripts in the following subnodes can be executed with >
    :Voofr py

#---node 1---{{{3~
print 'in node 1'
# section {{{
print 'inside section in node 1'
# }}}

#---node 1.1---{{{4~
print 'in node 1.1'

#---node 1.1.1---{{{5~
print 'in node 1.1.1'
print 'in buffer number', vim.eval("bufnr('')")
print voof.voofOutline.__doc__
print VOOF.nodes.keys()

#=============================================================================
Known Problems   {{{2~

1) Vim script code executed this way cannot use |line-continuation|.


2) When Voofrun executes a Vim script with Python code and a Python error
occurs, Python traceback is not printed. However, Python traceback is printed
to the PyLog buffer if it is enabled. Example in the next fold can be run with
":Voofr vim". >

    " Vim script with Python error {{{
    echo 'start of vim script'
    py print bogus_name
    py print 'py after error'
    echo 'the end'
    " }}}

Also, Vim script is not terminated when an error occurs in Python code.

==============================================================================
__PyLog__ BUFFER (:Vooflog)   {{{1~
                                                 *voof_Vooflog*
:Vooflog   This command creates scratch buffer __PyLog__ and redirects
           Python stdout and stderr to that buffer.

Subsequent Python print statements and error messages are appended to the
__PyLog__ buffer instead of being printed on Vim command line.

Log windows in all tabpages are scrolled automatically when something is
printed to the Log buffer. If a tabpage has several Log windows, only the
first one is scrolled. If the current tabpage has no Log windows, the Vooflog
command can be used to create one.

To restore original stdout and stdin (that is Vim command line):
unload, delete, or wipeout the __PyLog__ buffer (:bun, :bd, :bw).
NOTE: the __PyLog__ buffer is configured to be wiped out when unloaded or
deleted.

The filetype of the Log buffer is set to "log". Some syntax highlighting is
added automatically to highlight Python error messages and common Voof
messages.

When Python attemps to print a unicode string, e.g. >
    :py print u'ascii test'
    :py print u'\u042D \u042E \u042F \u2248 \u2260'
the string is encoded using the value of Vim option 'encoding' at the time
when the __PyLog__ buffer was created.


Known Problems:   {{{2~
1) __PyLog__ is not usable when in the Ex mode, that is after 'Q' or 'gQ'.
The lines in the __PyLog__ buffer will appear after the Ex mode is exited.

2) Under some conditions, there is a problem with the output of help(), which
apparently uses pydoc.py, which does something strange to output trailing \n.
Steps to reproduce:
1. Open new instance of Vim.
2. Vooflog
3. :py help(help)
4. Delete __PyLog__ buffer.
5. :py help(help)
An error occurs: '\n' is printed to the nonexisting log buffer.

==============================================================================
Implementation notes   {{{1~
                                                 *voof_notes*
------------------------------------------------------------------------------
Why VOOF uses Python   {{{2~
The main reason VOOF uses Python is because some critical code is much faster
in Python than in Vim script.

Python scans buffer for fold markers >10 times faster than a similar Vim
script code. A demo code is given below. To test: select lines, copy into a
register, and execute that register while in any buffer with a large number of
fold markers, or in any large buffer.

Results with "calendar_outline.txt": >
    3.2MB, 56527 lines, 4160 headlines;
    Vim 7.2, Python 2.5, Win2k; Intel Pentium 4 Mobile, 1.6 GHz.

    Vim method 1: 1.48 sec
    Vim method 2: 0.14 sec
    Python:       0.09 sec

Vim method 2 is fast, but it's inconvinient to use because it requires cursor
to be in the Body buffer.

"""""""""""""""DEMO CODE START""""""""""""""""""""""""""""""""""""""""
" Get lines with fold marker followed by level number. This is the bare
" minimum that must be done to create an outline.

""""" Vim method 1
func! Voof_VimTest1()
    let headlines = []
    let allLines = getline(1,'$')
    for line in allLines
        if stridx(line, '{{{')==-1 "}}}
            continue
        endif
        if match(line, '{{{\d\+')!=-1 " }}}
            call add(headlines, line)
        endif
    endfor
    return len(headlines)
endfunc

""""" Vim method 2
func! Voof_VimTest2()
    let headlines = []
    g/{{{\d\+/ call add(headlines, getline('.'))     "}}}
    return len(headlines)
endfunc

""""" Python code, similar to Vim method 1
python << EOF
def Voof_PyTest():
    import vim
    import re
    re_marker = re.compile(r'{{{\d+')   #}}}
    headlines = []
    allLines = vim.current.buffer[:]
    for line in allLines:
        if not '{{{' in line: continue  #}}}
        if re_marker.search(line):
            headlines.append(line)
    vim.command('let nodes=%s' %len(headlines))
EOF

""""" timing
let start = reltime()
let nodes = Voof_VimTest1()
echo 'Vim method 1: ' . reltimestr(reltime(start)) . 'sec; '. nodes . ' nodes'

let start = reltime()
let nodes = Voof_VimTest2()
echo 'Vim method 2: ' . reltimestr(reltime(start)) . 'sec; '. nodes . ' nodes'

let start = reltime()
py Voof_PyTest()
echo 'Python:       ' . reltimestr(reltime(start)) . 'sec; '. nodes . ' nodes'
"""""""""""""""DEMO CODE END""""""""""""""""""""""""""""""""""""""""""


In addition, Python's FOR loop is >30 times faster then Vim's. In the demo
code below the Python function is >60 times faster.

""""""" Vim FOR loop versus Python FOR loop """"""""""
func! Time_VimForLoop()
    let aList = range(1000000)
    for i in aList
        " pass
    endfor
endfunc

python << EOF
def Time_PyForLoop():
    aList =     range(1000000)
    for i in aList:
        pass
EOF

""" 9.76 sec """
let start = reltime()
call Time_VimForLoop()
echo 'Vim:    ' . reltimestr(reltime(start))

""" 0.15 sec """
let start = reltime()
py Time_PyForLoop()
echo 'Python: ' . reltimestr(reltime(start))
""""""""""""""""""""""""""""""""""""""""""""""""""""""

Thus, Python code should be much faster when handling large lists.

------------------------------------------------------------------------------
Separate Trees or Single Tree   {{{2~
A single Tree buffer could be used to display outlines of many files. Tlist
does that. This makes sense when working with several related files. Also,
having a single Tree would be more like Leo.

VOOF creates new Tree buffer for every new outline. This is simpler. It is
more appropriate for text notes, when outline files are likely to be
unrelated. Searching headlines is easier.

------------------------------------------------------------------------------
When to wipe out Tree buffer   {{{2~
A Tree buffer should be wiped out and the corresponding VOOF data deleted
after:

1) Body is wiped out. Tree has no reason to exist.
2) Body is deleted. Body buffer-local mappings are lost.
3) Body is unloaded or deleted. When Body is loaded again, its b:changedtick
   is different.
4) Tree is unloaded. All content is lost, Tree reverts to blank buffer.
5) Tree is deleted. As above, plus buffer local mappings are lost.

This is accomplished via BufUnload autocommands for Tree and Body.
BufUnload is also triggered on BufDelete and BufWipeout.

There are several fail-safe measures that ensure that nothing damaging will
happen if BufUnload autocommands are not triggered, as after "noa bun",
"noa bd", "noa bw".

The following scenario is potentially dangerous: user is in Tree, he does
":noau bun! {bufnr}" or "noau bd! {bufnr}" on corresponding Body, which is
modified, and then performs outline operation. That the outline is invalid
will be detected by b:changedtick check (see "Checking Bodies for ticks") and
the Tree will be wiped out.

Functions Voof_ToBody() and Voof_ToTree(), which are called when selecting
nodes and during every outline operation, will detect if the Body or Tree
buffer no longer exists, as after "noa bw", and will perform cleanup.

When Tree or Body local mappings and syntax are lost after "noa bd", it is
possible to restore them by executing the Voof command from the Body buffer. 

------------------------------------------------------------------------------
Checking Bodies for ticks   {{{2~
Tree buffer and associated outline data are updated on entering Tree via
BufEnter autocommand. To perform update only when the Body has changed since
the last update, Body's b:changedtick is used as shown in the docs. The
problem is that, for some reason,  b:changedtick cannot be read with
getbufvar(), so it's not accessible from Tree on BufEnter. The workaround is
to use Body's BufLeave autocommand to save Body's b:changedtick. So the entire
update scheme is:
    - on Body BufLeave save Body's b:changedtick as "tick"
    - on Tree BufEnter compare "tick_" to "tick"
    - if different, do outline update and set "tick_" to "tick"

The outline must be up to date when the cursor is in the Tree buffer. If it's
not, the consequences could be unpleasant. Performing outline operations will
cause data corruption.

Outline update can fail when something goes wrong with autocommands, e.g.,
when some plugin messes with eventignore. Or, the Body file can be modified by
an external application while cursor is in Tree.

Fortunately, most Voof commands involve a visit from Tree to Body or vice
versa, so we can compare "tick_" directly to Body's "b:changedtick". If they
are different, the Tree buffer is wiped out and associated data are cleaned
up. Such check is performed during:
    - selecting node from Tree or Body
    - Voofgrep command initiated from Tree
    - during every outline operation, before modifying buffers
The function that does this check is Voof_BodyCheckTicks().

These checks can be tested by modifying Body and then moving to Tree with
"noau wincmd w" or after "set ei=BufLeave", etc.

Another precaution is that outline update (voof.voofUpdate()) is always done
inside try/finally/endtry. This ensures that "tick_" will not be set to "tick"
when an error occurs during the update.

------------------------------------------------------------------------------
TODO   {{{2x~

------------------------------------------------------------------------------
May be   {{{3~

Commands to save and restore Tree folding. Will work on on all nodes in
selected region like Mark/Unmark. Create Tree folding on startup. Format: char
after fold marker (after 'x' if any), either 'o' for open fold or 'c' for
closed fold, nodes with children only. This is rarely needed. Leo's automatic
saving of each node expanded/contracted status is more annoying than useful.

Use t:voof_bodywnr and t:voof_treewnr to keep track of previous Body and Tree
windows, set these on WinLeave. This would be more robust than current
reliance of the previous window (winnr('#')) when both Tree and Body are split
and there are perhaps windows with other buffers as well.

------------------------------------------------------------------------------
Don't want to {{{3~

Command to search node and subnodes:
    Voofsearch {pattern} will search for
    \%>{nodeStart-1}l\%<{nodeEnd+1}l{pattern}
    default is to search node and subnodes
    options:
        n --search current node only
        h --search headlines only
        b --search bodies only
    or, require a range and search in range
    search headlines, finds anywhere
    .*\zs{pattern}\ze\&.*{{{       #}}}
    or (doesnt find after marker)
    {pattern}\V\ze\.\*{{{          #}}}
This is not very useful--pattern becomes invalid after lines are
inserted/deleted. Voofgrep already shows if particular node has a match.

Mark nodes with {pattern} -- could be option to Voofsearch.

Tree: undo does Body undo and updates outline
Tree: write writes Body

sort children

==============================================================================
CHANGELOG   {{{2~

v1.6, 2009-08-23   {{{3x~
Added checks to prevent data corruption when outline update fails for any
reason. When these checks fail, the Tree buffer is wiped out and outline data
are cleaned up. These checks can be tested as follows:
    - Create outline with the Voof command.
    - Delete some lines in Body buffer.
    - Move to Tree buffer with
      :noa wincmd w
    - Tree update did not happen and outline data are out of sync with the
      Body. In previous versions, performing outline operation at this stage
      would cause data corruption.
    - Select new node or try outline operation. Voof will issue error message,
      wipe out Tree buffer, and perform clean up.
Another way to test these checks is to modify Body file with an external
application while cursor is in the Tree window.
There is more details in "Implementation notes -> Checking Bodies for ticks".

Added some other foolproofing measures.

Improved automatic scrolling of PyLog buffer. Both previous (^wp) and current
window numbers are preserved in tabpages where PyLog is scrolled. Previously,
only current window number was preserved.

Fixed some bugs. Streamlined some code.

v1.5, 2009-08-15   {{{3~
New commands: Voofgrep, Voofunl.

Fixed blunder in "Move Down" outline operation that could cause outline
corruption. To find node after which to move, the cursor must be put on the
last node of the tree. That was done in Visual mode, but not in Normal mode.

<Return> and <Tab> in Tree buffers now also work in Visual mode.

Changed behavior of <Tab>: move cursor to Body window if current window is
Tree and vice versa. Previous behavior (cycle through all Body and Tree
windows) was less useful and inconsistent with <Return> behavior.

Added checks for Body foldmethod. If it's not "marker":
 - folds in Body are not collapsed (zMzv) after node selection in Tree and
   after outline operations;
 - Voofrun will refuse to run when executed while in Body buffer.

Made Tree buffers and PyLog buffer unlisted.

If possible, :Voofhelp command will open voof.txt via "tab help voof.txt"
command, so that tags will be active.

Made help tags start with "voof_".

Edited "Why VOOF uses Python": it turns out there is a fast, pure Vim method
to scan for headlines, but it's much less convenient than the Python way: >
    let headlines=[]
    g/{{{\d\+/ call add(headlines, getline('.'))    "}}}

code improvements {{{4~
The way "eventignore" was used to temporarily disable autocommands was unsafe.
"eventignore" is no longer set anywhere. "noautocmd" is used instead:
|autocmd-disable|.

Modified voof.voofUpdate() (formally treeUpdate) to work from any buffer as
long as the Tree is "ma". Voof_TreeBufEnter() now calls voof.voofUpdate()
directly.  Voof_BodyUpdateTree() updates Tree while in Body without moving to
Tree. This is extremely useful--can now use outline data while in Body.

Optimization in voof.voofOutline() parser function: >
    if not marker in line: continue
This makes sense because search with marker regexp is 3-4 times slower than
the above membership test, and in a typical outline most lines don't have
markers. Timing voof.voofUpdate() in Voof_TreeBufEnter(),
"calendar_outline.txt" update when headlines unchanged:
0.17 sec instead of 0.24 sec.

Changed Vim data variables voof_bodies, voof_trees, etc. from global to
script-local. Command VoofPrintData prints these for debugging purposes.
Should external scripts need to read these, a function that returns these
could be provided.

voof.computeSnLn() uses bisect--should be faster than previous naive code.

Changed <f-args> in Voofrun to <q-args> -- simpler.

PyLog code is, hopefully, near the state of perfection: when something goes
wrong, the exception info is displayed no matter what.

voof.oopMarkSelected() -- don't remove just one =, strip all consecutive

Voof_GetLines() uses winsaveview()/winrestview() to prevent scrolling after
zc/zo.

Use setreg() to restore registers exactly as shown in help.
Doing "let @z=z_old" is not reliable enough--register mode can change.


v1.4, 2009-07-12   {{{3~
New Tree navigation commands (Normal mode):
 x   Go to next marked node (mnemonic: find headline marked with 'x').
 X   Go to previous marked node.

"Unmark Node" operation now removes all consecutive 'x' chars from Body
headline instead of just one. This eliminates confusion when a bunch of 'x' is
present after start fold marker level number. For the same reason, "Mark Node
as Selected" (<LocalLeader>=) now strips 'x' chars after removed '=' char.

Bug: When Body starts with a headline, click on the first line in Tree (path
info line) doesn't select first node.
Fix: in Python code of Voof_TreeSelect() replaced
 nodeEnd =  VOOF.nodes[body][lnum]-1
   with
 nodeEnd =  VOOF.nodes[body][lnum]-1 or 1

Fixed errors in LogBufferClass write() method, printing messages when log
buffer doesn't exist.

Bug: Select more than one lines in Tree and press i/I/A/a. An error in
Voof_OopEdit() occurs.
Fix: Mapped i/I/A/a keys only for Normal mode with nnoremap. They were
mistakenly mapped with noremap.

A message is now printed when an outline operation is aborted because Body
buffer is readonly or nomodifiable.

Replaced most Python regions in voof.vim with voof.py functions.

Renamed some Python functions:
voof_WhatEver() means it's Python code for Voof_WhatEver() Vim function.

Voof_FoldLines() renamed Voof_GetLines().
Voof_FoldRun() renamed Voof_Run().

Various edits and additions in voof.txt.


v1.3, 2009-06-06   {{{3~
New: start fold marker string is obtained from Vim option 'foldmarker' when
the Voof command is run. Each Body buffer can have its own start fold marker.

Replaced Body's BufDelete autocommand with BufUnload autocommand. Tree buffer
is now wiped out when its Body is unloaded, deleted or wiped out. Corrected
Body and Tree BufUnload au functions: use "nested" and "noautocmd".

Added * to chars being stripped during headline construction to allow /**/
around fold markers. Better syntax highlight for commented headlines in Tree.

Changed how Tree buffer name is constructed: {bufname}_VOOF{bufnr} instead of
VOOF_{bufname}_{bufnr}.

When checking if current buffer is a Tree, instead of checking buffer name, do
has_key(g:voof_trees, bufnr('')).

When eventignore is set, save and restore original eventignore instead of
doing "set eventignore=" .

Annoyance: Moving Tree window to top/bottom (^W K/J) maximizes window height.
Fix: Don't set "winfixheight" when creating Tree window. I don't understand why
this happens. There is no such problem with "winfixwidth".

Got rid of Voof_ErrorMsg() and Voof_InfoMsg().

Expanded help file.

v1.2, 2009-05-30   {{{3~
Bug: after outline operation cursor may be on the last line of range instead
of first (if Visual and there is only one root node).
Fix: tweaked Voof_OopShowTree().

Re-wrote Voof_TreeToggleFold() to handle: no fold at cursor; cursor hidden in
fold.

Allow outline operation Copy when Body is noma or ro.

v1.1, 2009-05-26   {{{3~
Bug fix involving nomodifiable and readonly buffers.
Outline operations now silently abort if Body is noma or ro.

v1.0, 2009-05-25   {{{3~
Initial release.

==============================================================================
modelines   {{{1~
 vim:fdm=marker:ft=help:ai:et:noma:ro
 vim:foldtext=getline(v\:foldstart).'...'.(v\:foldend-v\:foldstart):
